 -- Undetectable WalkSpeed Hack with Fixed Animation Speed, No Air Glide, and GUI Display

local Players = game:GetService("Players")
local RunService = game:GetService("RunService")
local UIS = game:GetService("UserInputService")

local player = Players.LocalPlayer
local character = player.Character or player.CharacterAdded:Wait()
local humanoid = character:WaitForChild("Humanoid")
local rootPart = character:WaitForChild("HumanoidRootPart")

local speedMultiplier = 1 -- Default multiplier (1 = normal speed)
local hackActive = false

-- Default WalkSpeed for Animation Consistency
local defaultWalkSpeed = humanoid.WalkSpeed
local animationWalkSpeed = 17 -- Fixed animation speed reference

-- 🖥️ GUI SETUP 🖥️ --
local screenGui = Instance.new("ScreenGui")
screenGui.Name = "SpeedDisplay"
screenGui.Parent = player:WaitForChild("PlayerGui")

local frame = Instance.new("Frame")
frame.Size = UDim2.new(0, 300, 0, 50)
frame.Position = UDim2.new(0.5, -150, 0, -35)
frame.BackgroundColor3 = Color3.fromRGB(100, 100, 100) -- Default Gray
frame.BackgroundTransparency = 0.5
frame.Parent = screenGui

local speedLabel = Instance.new("TextLabel")
speedLabel.Size = UDim2.new(1, 0, 0.5, 0)
speedLabel.Position = UDim2.new(0, 0, 0, 0)
speedLabel.Text = "Speed: 1"
speedLabel.TextColor3 = Color3.fromRGB(255, 255, 255)
speedLabel.TextScaled = true
speedLabel.BackgroundTransparency = 1 -- Transparent background for text
speedLabel.Parent = frame

-- Adjust animation playback speed (fixed to 17 WalkSpeed)
local function adjustAnimationSpeed()
    for _, track in pairs(humanoid:GetPlayingAnimationTracks()) do
        if track.Name == "WalkAnim" or track.Name == "RunAnim" then
            track:AdjustSpeed(animationWalkSpeed / 13) -- Always animate at normal speed
        end
    end
end

-- Check if the player is on the ground
local function isGrounded()
    local ray = Ray.new(
        rootPart.Position,
        Vector3.new(0, -3, 0) -- Casts a short ray downward
    )
    local hit = workspace:FindPartOnRayWithIgnoreList(ray, {character})
    return hit ~= nil
end

-- Function to update velocity dynamically
local function updateVelocity()
    if isGrounded() and humanoid.MoveDirection.Magnitude > 0 then
        local speed = humanoid.WalkSpeed * speedMultiplier
        rootPart.Velocity = humanoid.MoveDirection * speed
    end
end

-- Update Speed Display
local function updateSpeedDisplay()
    speedLabel.Text = "Speed: " .. string.format("%.1f", speedMultiplier)
end

-- Toggle distance label visibility with M key
local speedLabelVisible = true  -- Tracks visibility state

-- Toggle GUI Color Based on Hack State
local function updateGUIColor()
    if hackActive then
        frame.BackgroundColor3 = Color3.fromRGB(0, 0, 0) -- Black when hack is active
        frame.BackgroundTransparency = 0 -- Fully opaque
    else
        frame.BackgroundColor3 = Color3.fromRGB(100, 100, 100) -- Revert to gray
        frame.BackgroundTransparency = 0.5 -- Semi-transparent
    end
end

-- Toggle WalkSpeed Hack
UIS.InputBegan:Connect(function(input, isTyping)
    if isTyping then return end

    -- Toggle Distance Label with M key
    if input.KeyCode == Enum.KeyCode.M then
        speedLabelVisible = not speedLabelVisible
        frame.Visible = speedLabelVisible
    end

    -- Toggle Hack (J Key)
    if input.KeyCode == Enum.KeyCode.J then
        hackActive = not hackActive
        if hackActive then
            RunService.RenderStepped:Connect(updateVelocity)
            adjustAnimationSpeed()
        end
        updateGUIColor()
    end

    -- Increase Speed (N Key)
    if input.KeyCode == Enum.KeyCode.N then
        speedMultiplier = speedMultiplier + 0.1
        updateSpeedDisplay()
    end

    -- Decrease Speed (B Key)
    if input.KeyCode == Enum.KeyCode.B then
        speedMultiplier = math.max(0.1, speedMultiplier - 0.1) -- Prevent going below 0.1
        updateSpeedDisplay()
    end
end)

-- Ensure animations remain consistent during speed changes
RunService.RenderStepped:Connect(function()
    if hackActive then
        adjustAnimationSpeed()
    end
end)
